---- Context




--- Current landscape


Lowering the entry bar into the big data domain by encouraging the creation of intercompatible bite-sized units targeting different aspects of big data processing: data, compute, frameworks. Compose computation steps with data without having to care about provisioning the technology stacks these are run on. Instead, anything that supports container runtimes and can orchestrate containers can be used. The container is the abstraction used to package software, container orchestration abstracts away the heterogenous infrastructure it runs open. One can envision an ecosystem where the infrastructure itself is dynamic and offered on a pay as you use basis, with containers running on untrusted resources. 

While the implementation proposed does not specifically require to containers to be involved, containerizaiton provide the ease of deployment and isolation of components which make the proposed solution feasible in a real world scenario.
-- these 2 are the same
Software containers are the enabling technology that allows us to make this vision a reality. This can be achieved without containerization as well, but the containers make it so much easier to package and deploy and orchestrate the functionality of the required components.

Software containers show much promise in the microservice world but recently there have been many developments allowing containers to be used for stateful services as well.

Packaging individual components in software solutions encourages more portability and makes it easier to share, without incurring a large setup cost and learning curve. Pretty APIs and explanation on what the packaged software does should be good enough to get someone started quickly. 

Not tying the implementation directly to a specific provider or technology is a big plus and allows the lowering of the entry bar and encourages creativity.

Evolution towards a data marketplace world where different data can be exchanged and re-used by multiple parties. The component reusability and dropping the vendor/ technnology lock in problem is important.

