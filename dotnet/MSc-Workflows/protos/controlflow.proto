syntax = "proto3";

import "dataflow.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Workflows.Models";

message StepTriggerRequest {
  MetadataEvent metadata = 1;
  string requestId = 2;
  string dataSource = 3;
  string dataSink = 4;
}

// Service running as part of the sidecar
service SidecarService {
  // Method used to accept requests from the orchestrator
  rpc TriggerStep (StepTriggerRequest) returns (google.protobuf.Empty);
}


message ComputeStepRequest {
  string localPath = 1;
}
message ComputeStepReply {
  string outputFilePath = 1;
}
service ComputeStepService {
  rpc TriggerCompute (ComputeStepRequest) returns (stream ComputeStepReply);
}

// Request used to notify the orchestrator service that data is available.
message DataEventRequest {
  MetadataEvent metadata = 1;
  string requestId = 2;
}

// Reply for notifications of data being available.
message DataEventReply {
  bool isSuccess = 1;
}

message OngoingWorkRequest {
  
}

message OngoingWorkReply {
  int32 workInQueue = 1;
  int32 workInFlight = 2;
}

service OrchestratorService {
  // Used to notify data is available. Sidecar <-> Orchestrator communications. 
  // That's why they are both streams, because the connections should be long lived.
  rpc NotifyDataAvailable (DataEventRequest) returns (DataEventReply);
  
//  Method to check if there is work ongoing
  rpc IsThereWorkOnGoing (OngoingWorkRequest) returns (OngoingWorkReply);
}
