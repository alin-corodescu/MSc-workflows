syntax = "proto3";

import "google/protobuf/any.proto";

option csharp_namespace = "Workflows.Models.DataEvents";

// The event describing new data being available in the system
message MetadataEvent {
  // Implementation specific metadata used to locate the data
  google.protobuf.Any metadata = 1;
  
  // Data localization information. Used to perform locality-aware scheduling.
  DataLocalization dataLocalization = 2;
  
  //TODO need something to identify the data source
}

// Captures information about where data is localized.
message DataLocalization {
  // The identifier of the region where data is stored
  string region = 1;
  
  // The identifier of the host storing the data
  string hostIdentifier = 2;
}

// Metadata used by the local file system adapter
message LocalFileSystemMetadata {
  bytes fileNameGuidBytes = 1;
}

// Request for pushing data
message PushDataRequest {
  // The file path of the file to be pushed to the storage
  string sourceFilePath = 1;
  
  // Hint for where the storage should store the data.
  DataLocalization targetHint = 2;
}

message PushDataReply {
  // The metadata necessary to locate the stored data in the storage
  MetadataEvent generatedMetadata = 1;
}

message PullDataRequest {
  // The metadata used to lookup the item in store
  MetadataEvent metadata = 1;
  
  string targetPath = 2;
}

message PullDataReply {
  bool isSuccess = 1;
}

// Interface for storage adapters
service StorageAdapter {
  rpc PushData (PushDataRequest) returns (PushDataReply);
  
  rpc PullData (PullDataRequest) returns (PullDataReply);
}

message DataChunkAvailableRequest{
  LocalFileSystemMetadata metadata = 1; 
}

message DataChunkAvailableReply {
  bool isSuccess = 1;
}

message AddressRequest {
  LocalFileSystemMetadata metadata = 1;
}

message AddressReply {
  string address = 1;
}

// Service hosted by the master node of the data flow solution
service DataMasterService {
  // Consider using streaming instead. for better throughput.
  rpc SignalDataChunkAvailable (DataChunkAvailableRequest) returns (DataChunkAvailableReply);
  
  rpc GetAddrForDataChunk (AddressRequest) returns (AddressReply);
}

message PeerDataRequest{
  LocalFileSystemMetadata identifier = 1;
}

message PeerDataReplyChunk {
  bytes payload = 1;
  
  // todo need to be be able to support streaming of data in multiple chunks
}

// Service hosted by every pod hosting some data for the data flow medium
service DataPeerService {
  // For a data request, returns a stream of chunks. Small sized-chunks
  rpc GetData (PeerDataRequest) returns (stream PeerDataReplyChunk);
}
